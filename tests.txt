TODO:

- AS valid
  - 'h' must be correct scope - AAR(1):AMS(1):AS(1):AAR(2):AMS(2):ASB(2), for instance
	  - must protect against messed up ordering
	- *** signing calculation done correctly, bottom up - Section 5.4.2 of [RFC6376]

- AMS valid
	- header fields also signed in bottom up order?

- ordering if header exists more than once?

- NA vs empty?

- AMS keys must be identical to DKIM KEYS
- additional DKIM sig options???
  - l
  - q
	- x
	- z

- ***Ordering amongst the individual ARC header fields and sets is
   specified below and MUST be followed for proper canonicalized signing
   and evaluation.

HOW TO TEST?
 - The ARC sets SHOULD be added at the top of a message header as it
   transits MTAs that do authentication checks
 - trace header fields, such as ARC, SHOULD be added at the top
   of the email header fields
 - section 5.2 - Set ordering, etc


- smarter integration of validation & signing tests

- structured header stuff

Assume failure + failure != success
VALIDATION TESTS:
  - cv=None
	  * no ARC-Sets 1
		* no ARC-Sets 2
	- cv=Pass
	  - i=1
		  * pass 1
			* pass 2
			* pass 3
			* additional irrelevant header fields
			* a=sha-rsa1
			* a=sha-rsa256
			* canon body changes
			* duplicate AMS header
			* non-existant AMS header fields
			* whitespace ' : ' h= 1
			* whitespace ' : ' h= 2
			* h= case insensitive
			* AMS b= ignores whitespace
			* bh= ignores whitespace
			* AS b= ignores whitespace
		- i=2
			* pass 1
			* pass 2
			* pass 3
		- i=3
		  * pass 1
			* pass 2
		-? i=5+
		  * pass 1
			* pass 2
  - cv=Fail
	  - invalid structured header syntax (rfc5322)
		  - ?
	  - invalid or missing i=values
		  - duplicated i= values
			  * duplicated AS i=
				* duplicated AMS i= current
				* duplicated AMS i= !current
      -?-  (anything else?)
	  - i=1 (all prototyped from cv=Pass, i=1, with single change)
	    - AS cv's not correct
		    * cv1 = Pass
		  	* cv1 = Fail
	    - AMS(1) invalid
		  	- invalid a=
				  * NA
					* unknkown algorithm(not rsa-sha1 or rsa-sha256)
		  	- invalid b=
				  * NA
					* not base64
					- cant get key or is invalid
					  * no key found
						* not vaild dkim key
					- invalid value
					  * modify signature
						* modified headers
					-? when generating sig, what if there are duplicate headers?  what is ordering?
		  	- invalid bh=
				  * NA
					* not base64
					- invalid value
					  * modify bh value
						* modify body(non-canonically)
		  	- invalid c=
				  * NA
		  	  - non-relaxed canonicalization
					  * simple
						* simple/simple
						* simple/relaxed
						* relaxed/simple
						* relaxed
		  	- invalid d=
				  * NA
					- invalid format
					  * not valid domain name
						*? international domain not an A-label - Section 2.3 of [RFC5890]
		  	- invalid h=
				  * NA
		      * includes AS headers
				  * incorrect order (or should this be taken into acount in b= ?)
					* includes AMS
		  	- invalid s=
				  * NA
					*? international selector not an A-label - Section 2.3 of [RFC5890]
		  	- invalid t=
					* invalid format
		  - AS(1) invalid
		  	- invalid a= (algorithm)
				  * NA
					* unknkown algorithm(not rsa-sha1 or rsa-sha256)
		  	- invalid b= (sig)
				  * NA
					* not base64
					- cant get key or is invalid
					  * no key found
						* not vaild dkim key
					- invalid value
					  * modify signature
						- modified headers
						  - check each header that should be included
							  * AAR(1)
								* AMS(1)
								* ASB(1)
		  	- invalid cv= (chain)
				  * NA
					* invalid value
		  	- invalid d= (domain)
				  * NA
					- invalid format
					  * not valid domain name
						*? international domain not an A-label - Section 2.3 of [RFC5890]
		  	- invalid s= (selector)
				  * NA
					*? international selector not an A-label - Section 2.3 of [RFC5890]
		  	- invalid t= (timestamp)
				  * invalid format
    - i=2 (all prototyped from cv=Pass, i=2, with single change)
		  - duplicate i= values
			  * duplicate AS i=
				* duplicate AMS i=
		  - AS cv's not correct
        * cv1 = Pass
		  	* cv1 = Fail
			  * cv2 = None
		  	* cv2 = Fail
			- AMS(2) invalid
			  - chose ~3 ways of failing
				  - ?
			- AS(1) invalid
			  * NA
			  - chose ~3 ways of failing
				  - ?
			- AS(2) invalid
			  * NA
			  - chose ~3 ways of failing
				  - ?
		- i=3 (all prototyped from cv=Pass, i=3, with single change)
			  - chose ~2 ways of failing
				  - ?
    - i=5+ (all prototyped from cv=Pass, i=5+, with single change)
        - chose ~1 ways of failing
				  - ?




SIGNING TESTS:
 - valid inputs
   - i=0
	   * simple test case, normal dkim headers
		 * ^^^ + modified AMS headers
		 * ^^^ + message permuted AMS headers
		 * ^^^ + non canon modified body
		 * ^^^ + duplicate headers
		 * ^^^ + canon modified body
		 * ^^^ + case changes for headers
  - i=1
	   * simple test case, normal dkim headers
		 * ^^^ + modified AMS headers
		 * ^^^ + message permuted AMS headers
		 * ^^^ + non canon modified body
		 * ^^^ + duplicate headers
		 * ^^^ + canon modified body
		 * ^^^ + case changes for headers
		 * ^^^ + modified AS headers
     - include VERIFICATION TEST SUITE
	- i=2
	   * simple test case, normal dkim headers
	   - include VERIFICATION TEST SUITE
	- i=3
	   * simple test case, normal dkim headers
	   - include VERIFICATION TEST SUITE
	- i=5+
	   * simple test case, normal dkim headers
     - include VERIFICATION TEST SUITE

 - invalid inputs (duplicate i= ?)
   - section 5.2.1, use 2nd level orderings(only for signing?) cv = fail
     - ?
